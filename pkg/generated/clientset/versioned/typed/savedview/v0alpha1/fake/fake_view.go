// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v0alpha1 "github.com/grafana/grafana/pkg/apis/savedview/v0alpha1"
	savedviewv0alpha1 "github.com/grafana/grafana/pkg/generated/applyconfiguration/savedview/v0alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeViews implements ViewInterface
type FakeViews struct {
	Fake *FakeSavedviewV0alpha1
	ns   string
}

var viewsResource = v0alpha1.SchemeGroupVersion.WithResource("views")

var viewsKind = v0alpha1.SchemeGroupVersion.WithKind("View")

// Get takes name of the view, and returns the corresponding view object, and an error if there is any.
func (c *FakeViews) Get(ctx context.Context, name string, options v1.GetOptions) (result *v0alpha1.View, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(viewsResource, c.ns, name), &v0alpha1.View{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v0alpha1.View), err
}

// List takes label and field selectors, and returns the list of Views that match those selectors.
func (c *FakeViews) List(ctx context.Context, opts v1.ListOptions) (result *v0alpha1.ViewList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(viewsResource, viewsKind, c.ns, opts), &v0alpha1.ViewList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v0alpha1.ViewList{ListMeta: obj.(*v0alpha1.ViewList).ListMeta}
	for _, item := range obj.(*v0alpha1.ViewList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested views.
func (c *FakeViews) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(viewsResource, c.ns, opts))

}

// Create takes the representation of a view and creates it.  Returns the server's representation of the view, and an error, if there is any.
func (c *FakeViews) Create(ctx context.Context, view *v0alpha1.View, opts v1.CreateOptions) (result *v0alpha1.View, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(viewsResource, c.ns, view), &v0alpha1.View{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v0alpha1.View), err
}

// Update takes the representation of a view and updates it. Returns the server's representation of the view, and an error, if there is any.
func (c *FakeViews) Update(ctx context.Context, view *v0alpha1.View, opts v1.UpdateOptions) (result *v0alpha1.View, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(viewsResource, c.ns, view), &v0alpha1.View{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v0alpha1.View), err
}

// Delete takes name of the view and deletes it. Returns an error if one occurs.
func (c *FakeViews) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(viewsResource, c.ns, name, opts), &v0alpha1.View{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeViews) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(viewsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v0alpha1.ViewList{})
	return err
}

// Patch applies the patch and returns the patched view.
func (c *FakeViews) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v0alpha1.View, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(viewsResource, c.ns, name, pt, data, subresources...), &v0alpha1.View{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v0alpha1.View), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied view.
func (c *FakeViews) Apply(ctx context.Context, view *savedviewv0alpha1.ViewApplyConfiguration, opts v1.ApplyOptions) (result *v0alpha1.View, err error) {
	if view == nil {
		return nil, fmt.Errorf("view provided to Apply must not be nil")
	}
	data, err := json.Marshal(view)
	if err != nil {
		return nil, err
	}
	name := view.Name
	if name == nil {
		return nil, fmt.Errorf("view.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(viewsResource, c.ns, *name, types.ApplyPatchType, data), &v0alpha1.View{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v0alpha1.View), err
}
