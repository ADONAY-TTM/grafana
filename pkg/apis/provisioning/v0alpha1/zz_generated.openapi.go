//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by openapi-gen. DO NOT EDIT.

package v0alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.CommonOriginProperties": schema_pkg_apis_provisioning_v0alpha1_CommonOriginProperties(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOrigin":             schema_pkg_apis_provisioning_v0alpha1_FileOrigin(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOriginList":         schema_pkg_apis_provisioning_v0alpha1_FileOriginList(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOriginSpec":         schema_pkg_apis_provisioning_v0alpha1_FileOriginSpec(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings":         schema_pkg_apis_provisioning_v0alpha1_FolderSettings(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOrigin":           schema_pkg_apis_provisioning_v0alpha1_GithubOrigin(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOriginList":       schema_pkg_apis_provisioning_v0alpha1_GithubOriginList(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOriginSpec":       schema_pkg_apis_provisioning_v0alpha1_GithubOriginSpec(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.OriginFileInfo":         schema_pkg_apis_provisioning_v0alpha1_OriginFileInfo(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.OriginFileList":         schema_pkg_apis_provisioning_v0alpha1_OriginFileList(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequest":            schema_pkg_apis_provisioning_v0alpha1_PullRequest(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestSpec":        schema_pkg_apis_provisioning_v0alpha1_PullRequestSpec(ref),
		"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestStatus":      schema_pkg_apis_provisioning_v0alpha1_PullRequestStatus(ref),
	}
}

func schema_pkg_apis_provisioning_v0alpha1_CommonOriginProperties(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "How the origin behaves\n\nPossible enum values:\n - `\"pr\"` Changes to spec+metadata require writing to a branch and merging elsewhere\n - `\"readonly\"` Resources are read from the origin, but can not be written\n - `\"writeable\"` Resources are written to the origin, then reflected in k8s storage",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"pr", "readonly", "writeable"},
						},
					},
					"disableDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Do not process delete requests",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"folder": {
						SchemaProps: spec.SchemaProps{
							Description: "Folder support within the origin",
							Ref:         ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"),
						},
					},
				},
				Required: []string{"title", "description", "mode", "disableDelete"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_FileOrigin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOriginSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOriginSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_FileOriginList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOrigin"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FileOrigin", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_FileOriginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "How the origin behaves\n\nPossible enum values:\n - `\"pr\"` Changes to spec+metadata require writing to a branch and merging elsewhere\n - `\"readonly\"` Resources are read from the origin, but can not be written\n - `\"writeable\"` Resources are written to the origin, then reflected in k8s storage",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"pr", "readonly", "writeable"},
						},
					},
					"disableDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Do not process delete requests",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"folder": {
						SchemaProps: spec.SchemaProps{
							Description: "Folder support within the origin",
							Ref:         ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"),
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to folder",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateIntervalSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "How frequently we scan for changes in the folder",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"title", "description", "mode", "disableDelete", "path", "updateIntervalSeconds"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_FolderSettings(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ignoreMetadataValue": {
						SchemaProps: spec.SchemaProps{
							Description: "When true, the metadata value will be replaced with a folder derived from the following properties",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"root": {
						SchemaProps: spec.SchemaProps{
							Description: "The root folder where resources will be applied",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"originStructure": {
						SchemaProps: spec.SchemaProps{
							Description: "Optionally use the origin file layout to create new folders and match the structure",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"ignoreMetadataValue", "root", "originStructure"},
			},
		},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_GithubOrigin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOriginSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOriginSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_GithubOriginList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOrigin"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.GithubOrigin", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_GithubOriginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "How the origin behaves\n\nPossible enum values:\n - `\"pr\"` Changes to spec+metadata require writing to a branch and merging elsewhere\n - `\"readonly\"` Resources are read from the origin, but can not be written\n - `\"writeable\"` Resources are written to the origin, then reflected in k8s storage",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"pr", "readonly", "writeable"},
						},
					},
					"disableDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Do not process delete requests",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"folder": {
						SchemaProps: spec.SchemaProps{
							Description: "Folder support within the origin",
							Ref:         ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"),
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"title", "description", "mode", "disableDelete", "repo"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.FolderSettings"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_OriginFileInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The path within the named origin",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Description: "Verification/identification hash (eg, checksum, etag, git hash etc)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "File modification time",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"path", "hash"},
			},
		},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_OriginFileList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.OriginFileInfo"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.OriginFileInfo", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_PullRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestSpec", "github.com/grafana/grafana/pkg/apis/provisioning/v0alpha1.PullRequestStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_PullRequestSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Possible enum values:\n - `\"file\"`\n - `\"gcs\"`\n - `\"git\"`\n - `\"github\"`\n - `\"s3\"`",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"file", "gcs", "git", "github", "s3"},
						},
					},
				},
				Required: []string{"title", "url", "provider"},
			},
		},
	}
}

func schema_pkg_apis_provisioning_v0alpha1_PullRequestStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Reflection of upstream status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"updated": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"updated", "state"},
			},
		},
	}
}
